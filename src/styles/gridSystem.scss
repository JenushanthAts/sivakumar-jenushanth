@use "sass:map";

$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
);

$columns: 12; // Number of columns in the grid
$gutter-width: 1rem; // Space between columns

@mixin respond-to($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  }
}

// Grid container
.grid-container {
  width: 85%;
  margin: 0 auto;
  display: flex;
  flex-wrap: wrap;
  box-sizing: border-box;
}

$keyValues: (
  "2": 0.5rem,
  "4": 1rem,
  "6": 1.5rem,
  "8": 2rem,
  "10": 2.5rem,
  "12": 3rem,
);

$justifyValues: (
  "start": flex-start,
  "end": flex-end,
  "center": center,
  "between": space-between,
  "around": space-around,
  "12": 3rem,
);

// Loop through the map to create font-size classes
@each $key, $value in $keyValues {
  .w-#{$key} {
    width: $value;
  }
}

// Loop through the map to create font-size classes
@each $key, $value in $keyValues {
  .h-#{$key} {
    height: $value;
  }
}

.grid {
  display: grid;
}

.flex {
  display: flex;
}

.flex-wrap {
  flex-wrap: wrap;
}
.items-center {
  align-items: center;
}

@each $key, $value in $justifyValues {
  .justify-#{$key} {
    justify-content: $value;
  }
}

$flex-directions: (
  "col": column,
  "row": row,
);

// Loop through the map to create font-size classes
@each $key, $value in $flex-directions {
  .flex-#{$key} {
    flex-direction: $value;
  }
}

// Loop through the map to create font-size classes
@each $key, $value in $keyValues {
  .gap-#{$key} {
    gap: $value;
  }
}

$grid-cols: (
  1: repeat(1, minmax(0, 1fr)),
  2: repeat(2, minmax(0, 1fr)),
  3: repeat(3, minmax(0, 1fr)),
  4: repeat(4, minmax(0, 1fr)),
  5: repeat(5, minmax(0, 1fr)),
  6: repeat(6, minmax(0, 1fr)),
  7: repeat(7, minmax(0, 1fr)),
  8: repeat(8, minmax(0, 1fr)),
);

@each $key, $value in $grid-cols {
  .grid-cols-#{$key} {
    grid-template-columns: $value;
  }
}

// Generate grid column classes
@each $breakpoint, $size in $breakpoints {
  @include respond-to($breakpoint) {
    @for $i from 1 through $columns {
      .#{$breakpoint}\:grid-cols-#{$i} {
        grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
      }
    }
  }
}

@each $key, $value in $keyValues {
  .mt-#{$key} {
    margin-top: $value;
  }
}

// Loop through the map to create padding classes
@each $key, $value in $keyValues {
  .p-#{$key} {
    padding: $value;
  }

  .px-#{$key} {
    padding-left: $value;
    padding-right: $value;
  }

  .py-#{$key} {
    padding-top: $value;
    padding-bottom: $value;
  }
}

$radius: (
  "sm": 0.125rem,
  "md": 0.375rem,
  "lg": 0.5rem,
  "full": 9999px,
);

border {
  border-width: 1px;
  border-style: solid;
}

$colors: (
  "gray-300": #d1d5db,
  "primary": #6366f1,
);

@each $name, $color in $colors {
  .border-#{$name} {
    border-color: $color;
  }

  .ring-#{$name} {
    box-shadow: 0 0 0 2px $color;
  }
}

@each $key, $value in $radius {
  .rounded-#{$key} {
    border-radius: $value;
  }
}

$shadows: (
  "sm": 0 1px 2px 0 rgba(0, 0, 0, 0.05),
  "md": 0 4px 6px rgba(0, 0, 0, 0.1),
);

@each $key, $shadow in $shadows {
  .shadow-#{$key} {
    box-shadow: $shadow;
  }
}

.transition {
  transition: all 0.2s ease-in-out;
}

.focus\:outline-none {
  &:focus {
    outline: none;
  }
}

.focus\:border-transparent {
  &:focus {
    border-color: transparent;
  }
}

.focus\:ring-2 {
  &:focus {
    box-shadow: 0 0 0 2px currentColor; // Will use the current text color unless overridden
  }
}
